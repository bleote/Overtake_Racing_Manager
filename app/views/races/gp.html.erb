<div class="race-gp pt-2 m-2 rounded border border-white">
  <div class="gp-page d-flex row justify-content-between align-items-center mx-3">

    <div class="gp-name-and-flag d-flex justify-content-center align-items-center mb-1">
      <div class="gp-name d-flex pe-3 align-items-center">
        <h2><%= @circuit.name %> GP </h2>
      </div>
       <div class="gp-flag d-flex align-items-center">
        <%= image_tag "circuits/#{@circuit.flag}", width: 38 %>
      </div>
    </div>

    <div class="current-session">
      <p>Your team: <%= @team.name %> </p>
    </div>

    <div class="current-session">
      <p>Current session: <%= @race.status %> </p>
    </div>

    <div class="circuit-weather">
      <p>Current weather: <%= @race.weather %> </p>
    </div>

    <div class="track-temperature">
      <p>Track temperature: <%= check_track_temperature(@race.weather) %>Â°C </p>
    </div>

    <div class="circuit-layout my-2">
      <%= image_tag "circuits/#{@circuit.layout}", width: 300 %>
    </div>

    <div id="starting-grid" class="starting-grid text-start">
      <div class="d-flex row grid-organizer justify-content-center">
        <div class="d-flex justify-content-center">
          <button id="start-race-1" class="btn btn-primary">Start Race</button>
        </div>
        <div class="gp-empty"></div>
        <!-- Display starting grid order -->
        <h3 class="text-center">Starting Grid:</h3>
        <div class="gp-empty"></div>
        <div class="col-sm-12 col-md-10">
          <% @starting_grid.each_with_index do |lap_time, index| %>
            <!-- Display driver's name, car and helmet -->
            <% driver_name = lap_time.driver.name %>
            <% driver_car = image_path("cars/#{lap_time.driver.car.image_lg}") %>
            <% alignment_class = index.even? ? 'align-left' : 'align-right' %>
            <div class="driver-info <%= alignment_class %>">
              <div class="car-info">
                <div class="d-flex car-image justify-content-center">
                  <div class="text-center">
                    <img src="<%= driver_car %>" alt="Car Image">
                  </div>
                </div>
                <div class="driver-name">
                  <%= "#{sprintf('%02d', index + 1)} - #{driver_name}" %>
                </div>
              </div>
            </div>
          <% end %>
          <div class="gp-empty"></div>
          <div class="d-flex justify-content-center">
            <button id="start-race-2" class="btn btn-primary">Start Race</button>
          </div>
          <div class="gp-empty"></div>
        </div>
      </div>
    </div>

    <!-- Dynamic view -->
    <div id="dynamic-results" class="race-results text-start mx-2" style="display: none;">
      <h3 id="race-header" class="text-center"></h3>
      <div id="light-container" class="light-container d-flex">
        <img id="light1" class="light" src="<%= asset_path('light_off.png') %>" alt="Light Off" style="display: block;">
        <img id="light2" class="light" src="<%= asset_path('light_on.png') %>" alt="Light On" style="display: none;">
        <img id="light3" class="light" src="<%= asset_path('light_off.png') %>" alt="Light Off" style="display: block;">
        <img id="light4" class="light" src="<%= asset_path('light_on.png') %>" alt="Light On" style="display: none;">
        <img id="light5" class="light" src="<%= asset_path('light_off.png') %>" alt="Light Off" style="display: block;">
        <img id="light6" class="light" src="<%= asset_path('light_on.png') %>" alt="Light On" style="display: none;">
        <img id="light7" class="light" src="<%= asset_path('light_off.png') %>" alt="Light Off" style="display: block;">
        <img id="light8" class="light" src="<%= asset_path('light_on.png') %>" alt="Light On" style="display: none;">
        <img id="light9" class="light" src="<%= asset_path('light_off.png') %>" alt="Light Off" style="display: block;">
        <img id="light10" class="light" src="<%= asset_path('light_on.png') %>" alt="Light On" style="display: none;">
      </div>
      <div class="gp-empty"></div>
      <p id="lap-count"></p>
      <div class="gp-empty"></div>
      <div id="driver-results">
        <!-- This will be populated by JavaScript -->
      </div>
      <div class="gp-empty"></div>
    </div>

    <!-- Static view -->
    <div id="static-results" class="race-results text-start mx-2" style="display: none;">
        <!-- Display race information -->
        <h3 class="text-center">Race Results</h3>
        <div class="gp-empty"></div>
        <!-- Display lap information -->
        <p>Lap: <%= @circuit.total_laps %> of <%= @circuit.total_laps %></p>
        <div class="gp-empty"></div>
        <!-- Info to calculate race results -->
        <% winner_lap_time = @sorted_race_results.first.last.sum { |lt| lt[:lap_time] } %>
        <% @sorted_race_results.each_with_index do |(driver, lap_times), index| %>
          <!-- Display driver's race result -->
          <% driver_car = image_path("cars/#{driver.car.image}") %>
          <% lap_time_style = index == 0 ? 'color: #1edd88;' : '' %>
          <% total_time = lap_times.sum { |lt| lt[:lap_time] } %>
          <% time_difference = total_time - winner_lap_time %>
          <% formatted_time_difference = format_lap_time(time_difference) %>
          <p id="race-lap-time-<%= driver.id %>" style="<%= lap_time_style %>">
            <% if index == 0 %>
              <%= "#{sprintf('%02d', index + 1)} - #{driver.initials}" %> <img src="<%= driver_car %>" alt="Car Image" style="width: 35px;"> Winner
            <% else %>
              <%= "#{sprintf('%02d', index + 1)} - #{driver.initials}"%> <img src="<%= driver_car %>" alt="Car Image" style="width: 35px;"> <%= " +#{formatted_time_difference}" %>
            <% end %>
          </p>
        <% end %>

        <div class="gp-empty"></div>

        <div class="d-flex justify-content-center">
          <%= link_to 'See Results', results_race_path(@race), class: 'btn btn-primary', id: 'see-results-btn' %>
        </div>

        <div class="gp-empty"></div>

    </div>
  </div>
</div>

<script>
  // Function to activate grid lights start procedure
  function gridLights() {
    var lightContainer = document.getElementById("light-container");
    var lights = lightContainer.getElementsByClassName("light");

    // Wait for 5 seconds
    setTimeout(function() {
      lights[0].style.display = "none";
      lights[1].style.display = "block";
    }, 5000);

    // After 500 milliseconds more
    setTimeout(function() {
      lights[2].style.display = "none";
      lights[3].style.display = "block";
    }, 6000);

    // After 500 milliseconds more
    setTimeout(function() {
      lights[4].style.display = "none";
      lights[5].style.display = "block";
    }, 7000);

    // After 500 milliseconds more
    setTimeout(function() {
      lights[6].style.display = "none";
      lights[7].style.display = "block";
    }, 8000);

    // After 500 milliseconds more
    setTimeout(function() {
      lights[8].style.display = "none";
      lights[9].style.display = "block";
    }, 9000);

    // After 1 second more, reset to initial display
    setTimeout(function() {
      for (var i = 0; i < lights.length; i++) {
        if (i % 2 === 0) {
          lights[i].style.display = "block";
        } else {
          lights[i].style.display = "none";
        }
      }
    }, 10000);

    // After 2 seconds, hide the light container
    setTimeout(function() {
      lightContainer.style.display = "none";
      for (var i = 0; i < lights.length; i++) {
        lights[i].style.display = "none"; // hide individual lights as well
      }
    }, 11000);
  }

  // Function to format lap time
  function formatLapTime(milliseconds) {
    var minutes = Math.floor(milliseconds / (1000 * 60));
    var seconds = Math.floor((milliseconds / 1000) % 60);
    var milliseconds_remainder = Math.floor(milliseconds) % 1000;

    // Pad minutes, seconds and milliseconds with leading zeros if necessary
    var minutes_str = (minutes < 10 ? '0' : '') + minutes;
    var seconds_str = (seconds < 10 ? '0' : '') + seconds;
    var milliseconds_str = (milliseconds_remainder < 100 ? '0' : '') + (milliseconds_remainder < 10 ? '0' : '') + milliseconds_remainder;

    return minutes_str + ":" + seconds_str + "." + milliseconds_str;
  }

  // Wrap the race starting logic in a function
  function startRace() {
    var yourRaceId = <%= @race.id %>;
    var startRaceData = <%= @start_race_json.html_safe %>;
    var startingGrid = <%= @starting_grid.to_json.html_safe %>;
    var currentLap = 0; // Start from lap 0
    var totalLaps = <%= @circuit.total_laps %>; // Get total laps from server
    var lightsOut = 0;

    var startingGridOrder = {};
    for (var i = 0; i < startingGrid.length; i++) {
      startingGridOrder[startingGrid[i].driver_id] = i;
    }

    function updateRaceResults() {
      // Calculate the total time for each driver
      var totalTimeData = [];
      for (var driverId in startRaceData) {
        if (startRaceData.hasOwnProperty(driverId)) {
          var totalTime = 0;
          for (var i = 0; i < currentLap; i++) {
            totalTime += startRaceData[driverId].lap_times[i];
          }
          totalTimeData.push({
            id: driverId,
            name: startRaceData[driverId].name,
            initials: startRaceData[driverId].initials,
            car_image: startRaceData[driverId].car_image,
            totalTime: totalTime});
        }
      }

      // Update the header and lap count
      document.getElementById('race-header').textContent = "Race Results";
      document.getElementById('lap-count').textContent = "Lap: " + currentLap + " of " + totalLaps;

      // Sort the drivers by total time
        if (currentLap === 0) {
          // Sort based on the initial order in @starting_grid
          totalTimeData.sort(function(a, b) {
            return startingGridOrder[a.id] - startingGridOrder[b.id];
          });
        } else {
          // Sort based on total time
          totalTimeData.sort(function(a, b) {
            return a.totalTime - b.totalTime;
          });
        }

      // Get the parent element
      var parentElement = document.getElementById('driver-results');

      // Clear the parent element
      while (parentElement.firstChild) {
        parentElement.removeChild(parentElement.firstChild);
      }

      // Create new elements for each driver and append them to the parent element
      for (var i = 0; i < totalTimeData.length; i++) {
          var driverElement = document.createElement('div');
          driverElement.id = 'race-lap-time-' + totalTimeData[i].id;

          // Calculate the gap to the leader
          var gapToLeader = (i === 0) ? 0 : totalTimeData[i].totalTime - totalTimeData[0].totalTime;

          // Check if the driver is the pole/leader or not, and the current gap to the leader
          if (i === 0) {
            var gapText = (currentLap === 0) ? "" : "Leader";
          }
          else {
            var gapText = (currentLap === 0) ? "": "+" + formatLapTime(gapToLeader);
          }

          // Add leading zero if index is less than or equal to 8
          var indexText = (i <= 8) ? "0" + (i + 1) : (i + 1);

          // Get the driver's initials
          var initials = totalTimeData[i].initials;

          // Get the driver's car image URL
          var carImage = totalTimeData[i].car_image;

          // Create the text node for index and initials
          var indexInitialsText = document.createTextNode(indexText + " - " + initials + " ");

          // Create an image element for the car image
          var carImageElement = document.createElement('img');
          carImageElement.src = '/assets/cars/' + carImage;
          carImageElement.alt = 'Car Image';
          carImageElement.style.width = '35px';

          // Create the text node for the gap text
          var gapTextElement = document.createTextNode(" " + gapText);

          // Append the child nodes in the desired order
          driverElement.appendChild(indexInitialsText);
          driverElement.appendChild(carImageElement);
          driverElement.appendChild(gapTextElement);

          // If the driver is the leader, change the font color
          if (i === 0) {
              driverElement.style.color = "#1edd88";
          }

          parentElement.appendChild(driverElement);
      }

      // Turn lights out variable to one and starts incrementing the current lap
      if (lightsOut === 0) {
        setTimeout(function() {
          lightsOut = 1;
        }, 11000);
      } else {
        currentLap++;
      }
    }

    // Call the updateRaceResults function immediately
    updateRaceResults();

    // Then call the updateRaceResults function every second
    var intervalId = setInterval(function() {
      if (currentLap < totalLaps) {
          updateRaceResults();
      } else {
          clearInterval(intervalId); // Stop updating when currentLap equals totalLaps

          // Hide dynamic view and show static view
          document.getElementById('dynamic-results').style.display = 'none';
          document.getElementById('static-results').style.display = 'block';
      }
    }, 1100);
  }

  // Call the startRace function when the "Start Race" button is clicked
  document.getElementById('start-race-1').addEventListener('click', function() {
    // Hide this start race button
    this.style.display = 'none';

    // Hide the second start race button
    document.getElementById('start-race-2').style.display = 'none';

    // Hide the starting-grid div
    document.getElementById('starting-grid').style.display = 'none';

    // Show the dynamic results div
    document.getElementById('dynamic-results').style.display = 'block';

    // Kick off the grid lights
    gridLights();

    // Start the race
    startRace();
  });

  document.getElementById('start-race-2').addEventListener('click', function() {
    // Hide this start race button
    this.style.display = 'none';

    // Hide the first start race button
    document.getElementById('start-race-1').style.display = 'none';

    // Hide the starting-grid div
    document.getElementById('starting-grid').style.display = 'none';

    // Show the dynamic results div
    document.getElementById('dynamic-results').style.display = 'block';

    // Kick off the grid lights
    gridLights();

    // Start the race
    startRace();
  });
</script>
